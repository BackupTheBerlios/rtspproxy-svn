
<!-- $Id$ -->

<rtspproxy>

	<!-- Enable or disable debug output. 
	     A more fine-grained configuration can be done in the log4j 
	     properties file. -->
	<debug>true</debug>

	<!-- Thread pool configuration. Number of active threads. -->
	<threadPoolSize>10</threadPoolSize>

	<proxy>

		<!-- TCP port to be used for incoming RTSP connection from clients. -->
		<rtspPort>5540</rtspPort>

		<!-- Server-side configuration -->
		<server>
	
			<!-- If specified, bound the proxy on a specifed network
                             interface. -->
                        <!-- <address>127.0.0.1</address> -->

                        <!-- Same as for the address, but specifying the
                             network interface name. On Linux they are called 'eth0', 'eth1'...
                             On  MacOS X they are 'en0', 'en1', .. -->
                        <!-- <interface>eth0</interface> -->
		
			<!-- RTP port used with servers -->
			<!-- <rtpPort>6970</rtpPort> -->

			<!-- RTCP port used with servers -->
			<!-- <rtcpPort>6971</rtcpPort> -->

			<!-- RDT port used with servers -->
			<!-- <rdtPort>6972</rdtPort> -->

			<!-- 
				<rtpUsePortrange>false</rtpUsePortrange>
				
				<rtpPortrange>
				<minPort>9000</minPort>
				<maxPort>9100</maxPort>
				<idleTimeout>120</idleTimeout>
				<idleScanInterval>60</idleScanInterval>
				<threadPoolSize>10</threadPoolSize>
				</rtpPortrange>
			-->
		</server>

		<!-- Client-side configuration -->
		<client>
			<!-- If specified, bound the proxy on a specifed network 
			     interface. -->
			<address>127.0.0.1</address>

			<!-- Same as for the address, but specifying the 
			     network interface name. On Linux they are called 'eth0', 'eth1'...
			     On  MacOS X they are 'en0', 'en1', .. -->
                        <!-- <interface>eth0</interface> -->

			<!-- Rtp port used with clients -->
			<!-- <rtpPort>6970</rtpPort> -->

			<!-- Rtcp port used with clients -->
			<!-- <rtcpPort>6971</rtcpPort> -->

			<!-- Rdt port used with clients -->
			<!-- <rdtPort>6972</rdtPort> -->
		</client>

		<!-- Proxy feature selection -->
		<transport>
			<!-- Enable RTP based streaming -->
			<rtp>true</rtp>

			<!-- Enable Real/RDT based streaming -->
			<rdt>true</rdt>

			<!-- These are some special case handling -->
			<hacks>
				<lowerTransportSuppress>false</lowerTransportSuppress>
				<offerRemoteSsrc>false</offerRemoteSsrc>
				<rtpSsrcUnreliable>false</rtpSsrcUnreliable>
			</hacks>

		</transport>

	</proxy>

	<!-- Management Interface -->
	<jmx>
		<!-- Enable or disable the JMX interface -->
		<enable>true</enable>

		<!-- Bound the JMX service to a local address. -->
		<address>127.0.0.1</address>

		<!-- Username and password to access the management interfaces -->
		<user>admin</user>
		<password>password</password>

		<!-- JMX web console -->
		<web>
			<enable>true</enable>
			
			<!-- HTTP port -->
			<port>8080</port>
		</web>

		<!-- JMX remote service -->
		<connectorService>
			<!-- Enable or disable the TCP connector for JMX -->
			<enable>true</enable>
		</connectorService>
	</jmx>

	<!-- Filters are mean layered functionalities such as Authentication or 
		Tracking are implemented.
	-->
	<filters>

		<!-- Authentication filter -->
		<authentication>
			<!-- Enable or disable the authentication filter -->
			<enable>true</enable>

			<implClass>
				rtspproxy.filter.authentication.SimpleAuthenticationProvider
			</implClass>

			<!-- Authentication Scheme: 
				can be 'Basic' or 'Digest'
			-->
			<scheme>Digest</scheme>

			<!-- The SimpleAuthenticationProvider uses a Property file 
			     to keep a user db. In this file, keys are the usernames 
			     and values are the passwords. -->
			<usersFile>conf/users.properties</usersFile>
		</authentication>

		<!-- Filter clients using theyr IP address -->
		<ipaddress>
			
			<!-- Enable or disable the ipaddress filter -->
                        <enable>true</enable>

			<implClass>
				rtspproxy.filter.ipaddress.SimpleIpAddressProvider
			</implClass>

			<!-- Access rules for clients -->
			<client-rules>	
				<rule type="deny"  pattern="*" />
				<rule type="allow" pattern="127.0.0.1" />
				<rule type="allow" pattern="10.0.0.*" />
				<rule type="allow" pattern="*.some.domain" />
			</client-rules>

			<!-- Restrict access to certains RTSP servers  -->
			<server-rules>
				<rule type="deny" pattern="*.bad.domain.com" />
			</server-rules>
		</ipaddress>


		<accounting>

			<!-- Enable or disable the ipaddress filter -->
			<enable>false</enable>

			<!-- -->
			<implClass>
				rtspproxy.filter.accounting.SimpleAccountingProvider
			</implClass>

			<category>accounting.rtspproxy</category>
		</accounting>


		<rewrite>

			<!-- enable or disable the rewriting filter -->
			<enable>false</enable>

			<!-- Class implementing the rewriting filter -->
			<implClass>
				rtspproxy.filter.rewrite.SimpleUrlRewritingProvider
			</implClass>

			<!-- SimpleUrlRewritingProvider uses the following rules 
		 	     to rewrite the URLs.	
                          -->
			<rules>
				<mapping>
					<from>rtsp://10.0.0.1:554/</from>
					<to>rtsp://10.0.0.2:1554/foo/</to>
				</mapping>
				<mapping>
					<from>rtsp://127.0.0.1/</from>
					<to>rtsp://10.0.0.26:1554/foo/</to>
				</mapping>
			</rules>
		</rewrite>

		<control>
			<enable>false</enable>
			
			<filters>
				<filter side="Client" 
					name="testFilter" 
					implClass="path.to.Class" />

				<filter side="Server" 
					name="testFilterServer"
					implClass="other.path.class" />
			</filters>
		</control>

	</filters>

</rtspproxy>
