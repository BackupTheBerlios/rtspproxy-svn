07/07/03
  *  La classe CacheStatus verifica periodicamente (il default è 10 secondi) 
     lo stato di riempimento della cache. Se la dimensione dei dati in cache
     supera quella impostata da linea di comando (opzione --cache-maxsize=x) 
     oppure quella predefinita (50 Mb), viene attivata la procedura di swap 
     out che provvede ad eliminare l'elemento meno recentemente utilizzato 
     dalla cache.
     A questo punto si presenta però un potenziale bug: cosa succede se nella
     cache si ha un solo elemento, al quale si stanno ancora aggiungendo 
     pacchetti, che supera da solo la dimensione massima della cache?
     Quando CacheStatus (che gira in un altro thread) effettua il controllo, 
     eliminerà l'elemento dalla cache, provocando un segmentation fault, in 
     quanto nell'altro thread si cercherà di continuare ad aggiungere pacchetti
     ad una risorsa inesistente...
     Questo problema può essere risolto in 2 modi:
	- Considerando che la situazione è abbastanza remota, si può modificare
	  CacheStatus in modo che non elimini un elemento dalla cache quando 
	  questo risulta essere l'unico presente. In questo modo protrebbe 
	  verificarsi la situazione di un unico elemento in cache che supera 
	  abbondantemente la dimensione massima impostata...
	- Utilizzare una Mutex per l'accesso agli elementi in cache. Questa 
	  soluzione è più elegante ma presenta una difficoltà: occorre tenere
	  traccia dello stato dell'elemento in cache, nel senso di sapere se
	  si stanno ancora aggiungendo pacchetti oppure se l'interazione con 
	  il server è conclusa.

09/06/03

  *  In effetti il proxy ricostruisce da zero le richieste RTSP che riceve,
     "dimenticandosi" di trasmettere tutti gli header. 
     È stato anche testato il funzionamento con il client RealOne Player che
     non funziona (mentre lavora correttamente con il proxy di RealNetworks).

     Successivamente ho provato a simulare la sessione RTSP con telnet, 
     collegandomi al proxy e inviando richieste dirette al server.
     Utilizzando il proxy di RealNetworks i comportamenti sono quelli aspettati, 
     si invia una DESCRIBE, il server invia la descrizione SDP della sessione;
     si invia SETUP indicando il tipo di trasporto supportato (in questo caso
     ho messo RTP) ed il server risponde OK indicando anche il Session ID.
     Infine invio PLAY che fa partire lo streaming. 
     Ovviamente, essendo un test, il server invia i dati tramite UDP alle porte
     indicate, ma queste stream non vengono ricevute da nessuno e soprattutto 
     nessuno manda un feedback al server tramite RTCP. Infatti accade che il 
     server invia periodicamente dei SET_PARAMETER dummy per vedere se il client 
     è ancora attivo e dopo un certo tempo chiude la sessione.

     Quando è stato invece utilizzato il proxy Komssys, dopo aver inviato una 
     qualsiasi richiesta standard al server, non si riceve alcuna risposta. Le
     richieste si notano nei messaggi di debug del proxy, ma al client telnet
     non arriva niente.

06/06/03

  *  Effettuati diversi test per verificare il funzionamento del Proxy Komssys.
     Sono stati utilizati il server Helix ed il client di prova openRTSP. 
     Il problema evidenziato dai test è che il proxy in realtà non lascia
     inalterate le richieste RTSP del server e del client. Questo provoca il 
     fallimento della comunicazione.
     Dopo aver investigato sull'origine di questo comportamento ho scritto
     alla mailing list degli sviluppatori di Komssys i quali hanno risposto 
     di aggiungere il supporto per gli header RTSP sconosciuti.     

05/06/03

  *  Sono state eseguite varie prove con server e proxy Komssys.
     Una prima cosa è che il server non genera automaticamente la descrizione 
     SDP della sessione richiesta, ma questa deve essere compilata a mano per
     ogni file.
     Dopo aver utilizzato un esempio recuperato sulla mailing-list, il client
     "openRTSP" (quelli inclusi in Komssys non funzionano), riesce a completare
     la sessione RTSP e riceve lo stream. Il file ricevuto non viene però 
     riconosciuto come Mp3 da nessun programma.
     Se si lancia il server in modalità "proxy testing cache" questo va in 
     segmentation fault.
     Il proxy senza cache ha invece problemi quando come server è utilizzato
     Helix. In questo caso il client lancia una richiesta DESCRIBE e resta in
     attesa della risposta che non filtra dal proxy. (Il proxy però funziona
     quando il server è lo stesso Komssys)

04/06/03
  *  Il proxy si mette in ascolto sulla porta TCP specificata (default 544) in
     attesa di richieste RTSP. Queste richieste vengono quindi girate al server,
     dopo aver modificato alcuni parametri all'interno di esse.
     Es.: Quando il client invia una richiesta SETUP, indica anche le 2 porte UDP
     (RTP e RTCP) che intende utilizzare per lo streaming. Il proxy a questo
     punto sostituirà le 2 porte indicate dal client con altre due porte
     relative a se stesso.

  *  Nel proxy saranno presenti 4 componenti fondamentali:
     - Un server che raccoglie le richieste RTSP dei client e le processa
     - Un client RTSP che instaura una normale sessione con il "vero" server RTSP
     - Il gestore della cache
     - Un server RTSP che gestisce sessioni per le quali è stato trovato un hit
       nella cache

     Dubbio: Nel caso di una sessione che non è stata trovata nella cache, il
             proxy deve girare immediatamente i pacchetti RTP che riceve oppure
             deve salvarli nella cache e gestire la comunicazione con il client
             attraverso il modulo che fa da server RTSP?

  *  http://komssys.sourceforge.net/
     Qui è presente un'altra implementazione dei protocolli RSTP e RTP. 
